'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

/**
 * Responder for promisified results
 * @param  {object} dispatchResult The result from `store.dispatch()`
 * @param  {function} send           The function used to respond to original message
 * @return {undefined}
 */
var promiseResponder = function promiseResponder(dispatchResult, send) {
  Promise.resolve(dispatchResult).then(function (res) {
    send({
      error: null,
      value: res
    });
  }).catch(function (err) {
    send({
      error: err,
      value: null
    });
  });
};

exports.default = function (store, _ref) {
  var portName = _ref.portName;
  var dispatchResponder = _ref.dispatchResponder;

  // set dispatch responder as promise responder
  if (!dispatchResponder) {
    dispatchResponder = promiseResponder;
  }

  /**
   * Setup action handler to respond to dispatches from UI components
   */
  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
    if (request.type === _constants.DISPATCH_TYPE) {
      dispatchResponder(store.dispatch(request.payload), sendResponse);
      return true;
    }
  });

  /**
   * Setup extended connection for state updates
   */
  chrome.runtime.onConnect.addListener(function (port) {
    if (port.name !== portName) {
      return;
    }

    /**
     * Send store's current state through port
     * @return undefined
     */
    var sendState = function sendState() {
      port.postMessage({
        type: _constants.STATE_TYPE,
        payload: store.getState()
      });
    };

    var unsubscribe = store.subscribe(sendState);

    port.onDisconnect.addListener(unsubscribe);

    // send initial state
    sendState();
  });
};